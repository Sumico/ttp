<template>

<!--one more template###############################################################################################-->
<template
name="template-1" 
description="Groups to test various function"
>
<vars>
vlans = "unrange(rangechar='-', joinchar=',') | joinmatches(',')"
</vars>

<!--to test chain with unrange and joinmatches-->
<input name="test1-1" load="text" groups="interfaces">
interface GigabitEthernet3/3
 switchport trunk allowed vlan add 138,166-173 
 switchport trunk allowed vlan add 400,401,410
</input>

<group name="interfaces" output="test1-1">
interface {{ interface }}
 switchport trunk allowed vlan add {{ trunk_vlans | chain("vlans") }}
</group>

<output 
name="test1-1" 
load="json" 
functions="is_equal" 
description="test vlans unrange and joinmatches functions" 
>
{
    "interfaces": {
        "interface": "GigabitEthernet3/3",
        "trunk_vlans": "138,166,167,168,169,170,171,172,173,400,401,410"
    }
}
</output>


<!--test contains('vlan') for interfaces-->
<input name="test1-2" load="text" groups="SVIs">
interface Vlan123
 description Desks vlan
 ip address 192.168.123.1 255.255.255.0
!
interface GigabitEthernet1/1
 description to core-1
!
interface Vlan222
 description Phones vlan
 ip address 192.168.222.1 255.255.255.0
!
interface Loopback0
 description Routing ID loopback
</input>

<group name="SVIs" output="test1-2">
interface {{ interface | contains("Vlan") }}
 description {{ description | ORPHRASE}}
 ip address {{ ip }} {{ mask }}
</group>

<output 
name="test1-2" 
load="python" 
functions="is_equal" 
description="test that only interaces with vlan got to results"
>
{'SVIs': [{'interface': 'Vlan123', 'description': 'Desks vlan', 'ip': '192.168.123.1', 'mask': '255.255.255.0'}, {'interface': 'Vlan222', 'description': 'Phones vlan', 'ip': '192.168.222.1', 'mask': '255.255.255.0'}]}
</output>


<!--test containsall for group results-->
<input 
name="test1-3" 
load="text" 
groups="interfaces_contansall"
>
interface Port-Chanel11
  description Storage Management
!
interface Loopback0
  description RID
  ip address 10.0.0.3/24
!
interface Vlan777
  description Management
  ip address 192.168.0.1/24
  vrf MGMT
</input>

<group name="interfaces_contansall" containsall="ip, vrf" output="test1-3">
interface {{ interface }}
  description {{ description }}
  ip address {{ ip }}/{{ mask }}
  vrf {{ vrf }}
</group>

<output name="test1-3"
load="json"
functions="is_equal"
description="test containsall for group"
>
{
    "interfaces_contansall": {
        "description": "Management",
        "interface": "Vlan777",
        "ip": "192.168.0.1",
        "mask": "24",
        "vrf": "MGMT"
    }
}
</output>


<!--test containsany for group results-->
<input 
name="test1-4" 
load="text" 
groups="interfaces_contains"
>
interface Port-Chanel11
  description Storage Management
!
interface Loopback0
  description RID
  ip address 10.0.0.3/24
!
interface Vlan777
  description Management
  ip address 192.168.0.1/24
  vrf MGMT
</input>

<group name="interfaces_contains" contains="ip,vrf" output="test1-4">
interface {{ interface }}
  description {{ description }}
  ip address {{ ip }}/{{ mask }}
  vrf {{ vrf }}
</group>

<output name="test1-4"
load="json"
functions="is_equal"
description="test contains any for group"
>
{
    "interfaces_contains": [
        {
            "description": "RID",
            "interface": "Loopback0",
            "ip": "10.0.0.3",
            "mask": "24"
        },
        {
            "description": "Management",
            "interface": "Vlan777",
            "ip": "192.168.0.1",
            "mask": "24",
            "vrf": "MGMT"
        }
    ]
}
</output>


<!--test group table method-->
<input 
name="test1-5" 
load="text" 
groups="arp_table"
>
CSR1Kv-3-lab#show ip arp
Protocol  Address          Age (min)  Hardware Addr   Type   Interface
Internet  10.1.13.1              98   0050.5685.5cd1  ARPA   GigabitEthernet2.13
Internet  10.1.13.3               -   0050.5685.14d5  ARPA   GigabitEthernet2.13
</input>

<group name="arp_table" method="table" output="test1-5">
Internet  {{ ip }}  {{ age | DIGIT }}   {{ mac }}  ARPA   {{ interface }}
Internet  {{ ip }}  -                   {{ mac }}  ARPA   {{ interface }}
</group>

<output name="test1-5"
load="json"
functions="is_equal"
description="test group table method"
>
{
    "arp_table": [
        {
            "age": "98",
            "interface": "GigabitEthernet2.13",
            "ip": "10.1.13.1",
            "mac": "0050.5685.5cd1"
        },
        {
            "interface": "GigabitEthernet2.13",
            "ip": "10.1.13.3",
            "mac": "0050.5685.14d5"
        }
    ]
}
</output>


<!--test dynamic path-->
<input 
name="test1-6" 
load="text" 
>
ucs-core-switch-1#show run | section bgp
router bgp 65100
  vrf CUST-1
    neighbor 59.100.71.193
      remote-as 65101
      description peer-1
      address-family ipv4 unicast
        route-map RPL-1-IMPORT-v4 in
        route-map RPL-1-EXPORT-V4 out
      address-family ipv6 unicast
        route-map RPL-1-IMPORT-V6 in
        route-map RPL-1-EXPORT-V6 out
    neighbor 59.100.71.209
      remote-as 65102
      description peer-2
      address-family ipv4 unicast
        route-map RPL-2-IMPORT-V6 in
        route-map RPL-2-EXPORT-V6 out
</input>

<group name="router.bgp.BGP_AS_{{ asn }}" input="test1-6" output="test1-6">
router bgp {{ asn }}
  <group name="vrfs.{{ vrf_name }}">
  vrf {{ vrf_name }}
    <group name="peers.{{ peer_ip }}">
    neighbor {{ peer_ip }}
      remote-as {{ peer_asn }}
      description {{ peer_description }}
	  <group name="afi.{{ afi }}.unicast">
      address-family {{ afi }} unicast
        route-map {{ rpl_in }} in
        route-map {{ rpl_out }} out
	  </group>
	</group>
   </group>
</group>

<output name="test1-6"
load="python"
functions="is_equal"
description="test dynamic path"
>
{'router': {'bgp': {'BGP_AS_65100': {'vrfs': {'CUST-1': {'peers': {'59.100.71.193': {'peer_asn': '65101', 'peer_description': 'peer-1', 'afi': {'ipv4': {'unicast': {'rpl_in': 'RPL-1-IMPORT-v4', 'rpl_out': 'RPL-1-EXPORT-V4'}}, 'ipv6': {'unicast': {'rpl_in': 'RPL-1-IMPORT-V6', 'rpl_out': 'RPL-1-EXPORT-V6'}}}}, '59.100.71.209': {'peer_asn': '65102', 'peer_description': 'peer-2', 'afi': {'ipv4': {'unicast': {'rpl_in': 'RPL-2-IMPORT-V6', 'rpl_out': 'RPL-2-EXPORT-V6'}}}}}}}}}}}
</output>


<!--test set function-->
<vars>
mys_set_var = "my_set_value"
</vars>

<input 
name="test1-7" 
load="text" 
>
interface GigabitEthernet3/4
 switchport mode access 
 switchport trunk encapsulation dot1q
 switchport mode trunk
 switchport nonegotiate
 shutdown
!
interface GigabitEthernet3/7
 switchport mode access 
 switchport mode trunk
 switchport nonegotiate
!
</input>

<group name="interfacesset" input="test1-7" output="test1-7">
interface {{ interface }}
 switchport mode access {{ mode_access | set("True") }}
 switchport trunk encapsulation dot1q {{ encap | set("dot1q") }}
 switchport mode trunk {{ mode | set("Trunk") }} {{ vlans | set("all_vlans") }}
 shutdown {{ disabled | set("True") }} {{ test_var | set("mys_set_var") }}
!{{ _end_ }}
</group>

<output name="test1-7"
functions="is_equal"
description="test set function"
load="python"
>
{
    "interfacesset": [
        {
            "disabled": "True",
            "encap": "dot1q",
            "interface": "GigabitEthernet3/4",
            "mode": "Trunk",
            "mode_access": "True",
            "test_var": "my_set_value",
            "vlans": "all_vlans"
        },
        {
            "interface": "GigabitEthernet3/7",
            "mode": "Trunk",
            "mode_access": "True",
            "vlans": "all_vlans"
        }
    ]
}
</output>



<!--test dynamic path with regex formatters-->
<input 
name="test1-8" 
load="text" 
>
interface Port-Chanel11
  description Storage
!
interface Loopback0
  description RID
  ip address 10.0.0.3/24
!
interface Vlan777
  description Management
  ip address 192.168.0.1/24
  vrf MGMT
!
</input>

<group name="interfaces*.{{ interface }}" output="test1-8" input="test1-8">
interface {{ interface }}
  description {{ description }}
  ip address {{ ip }}/{{ mask }}
  vrf {{ vrf }}
</group>

<output name="test1-8"
functions="is_equal"
description="test dynamic path with regex formatters"
load="json"
>
{
     "interfaces": [
         {
             "Loopback0": {
                 "description": "RID",
                 "ip": "10.0.0.3",
                 "mask": "24"
             },
             "Port-Chanel11": {
                 "description": "Storage"
             },
             "Vlan777": {
                 "description": "Management",
                 "ip": "192.168.0.1",
                 "mask": "24",
                 "vrf": "MGMT"
             }
         }
     ]
}
</output>

<input load="text" name="test1-9">
interface Port-Chanel11
  description Storage
!
interface Loopback0
  description RID
  ip address 10.0.0.3/24
!
interface Vlan777
  description Management
  ip address 192.168.0.1/24
  vrf MGMT
!
</input>

<group input="test1-9" output="test1-9">
interface {{ interface }}
  description {{ description }}
<group name = "ips">
  ip address {{ ip }}/{{ mask }}
</group>
  vrf {{ vrf }}
!{{_end_}}
</group>

<output name="test1-9"
functions="is_equal"
description="test top group without name attribute with _anonymous_ path"
load="json"
>
[
    {
        "description": "Storage",
        "interface": "Port-Chanel11"
    },
    {
        "description": "RID",
        "interface": "Loopback0",
        "ips": {
            "ip": "10.0.0.3",
            "mask": "24"
        }
    },
    {
        "description": "Management",
        "interface": "Vlan777",
        "ips": {
            "ip": "192.168.0.1",
            "mask": "24"
        },
        "vrf": "MGMT"
    }
]
</output>


<input name="test1-10" load="text">
interface Vlan777
  description Management
  ip address 192.168.0.1/24
  vrf MGMT
!
interface Vlan778
  description Management
  switchport mode trunk
  switchport trunk allowed vlans 23,24,37
  ip address 192.168.0.1/24
  vrf MGMT
!
</input>

<vars>
my_var = "L2VC"
</vars>

<group name="interfaces_with_set" input="test1-10" output="test1-10">
interface {{ interface }}
  description {{ description }}
  switchport mode trunk {{ mode | set("trunk") }} {{ vlans_trunk | set("1-4096") }}
  switchport trunk allowed vlans {{ trunk_vlans | split(",") }}
  vrf {{ vrf }}
  {{ var1 | set("my_value1") }}
{{ var2 | set("my_value2") }}
{{ var3 | set("my_value3") }} {{ var4 | set("my_value4") }}
{{ var5 | set("my_var") }}
!{{_end_}} 
</group>

<output name="test1-10"
functions="is_equal"
description="test variables let function"
load="json"
>
{
    "interfaces_with_set": [
        {
            "description": "Management",
            "interface": "Vlan777",
            "var1": "my_value1",
            "var2": "my_value2",
            "var3": "my_value3",
            "var4": "my_value4",
            "var5": "L2VC",
            "vrf": "MGMT"
        },
        {
            "description": "Management",
            "interface": "Vlan778",
            "mode": "trunk",
            "trunk_vlans": [
                "23",
                "24",
                "37"
            ],
            "var1": "my_value1",
            "var2": "my_value2",
            "var3": "my_value3",
            "var4": "my_value4",
            "var5": "L2VC",
            "vlans_trunk": "1-4096",
            "vrf": "MGMT"
        }
    ]
}
</output>


<input name="test1-11" load="text">
-------------------------
Device ID: switch-2.lab.com
Interface: GigabitEthernet4/6,  Port ID (outgoing port): GigabitEthernet1/5

-------------------------
Device ID: switch-1.lab.com
Interface: GigabitEthernet1/1,  Port ID (outgoing port): GigabitEthernet0/1
</input>

<group name="cdp_test_item" input="test1-11" output="test1-11">
Device ID: {{ peer_hostname | split('.') | item(0) }} 
Interface: {{ Interface | item(-40) }},  Port ID (outgoing port): {{ peer_interface | item(40) }}
</group>

<output name="test1-11"
functions="is_equal"
description="test variables 'item' function"
load="json"
>
{
    "cdp_test_item": [
        {
            "Interface": "G",
            "peer_hostname": "switch-2",
            "peer_interface": "5"
        },
        {
            "Interface": "G",
            "peer_hostname": "switch-1",
            "peer_interface": "1"
        }
    ]
}
</output>


<input name="test1-12" load="text"
description="this group tests case when we have multiple regexes matched same line, the logic tested is that 
match for current self.record path will be selected as the correct one. In addition joinmatches are tested to join
lists as results.
"
>
VRF TPGMPLS (VRF Id = 4); default RD 7545:24;
  Old CLI format, supports IPv4 only
  Flags: 0xC
  Interfaces:
    Te0/3/0.401              Te0/3/0.302              Te0/3/0.315             
    Te0/3/0.316              Te0/3/0.327              Te0/3/0.371             
    Te0/3/0.373              Te0/3/0.15               Te0/3/0.551             
    Te0/3/0.552              Te0/3/0.2527             Te0/3/0.711             
    Te0/3/0.500              Te0/3/0.325              Te0/3/0.324   
    Te0/3/0.32787 
Address family ipv4 unicast (Table ID = 0x4):
  Flags: 0x0
  Export VPN route-target communities
    RT:7545:24              
  Import VPN route-target communities
    RT:7545:24               RT:7545:7544             RT:9942:17
    RT:9942:31546            RT:7545:89900            RT:7545:650
    RT:7545:89564            RT:7545:89611           
  No import route-map
  No global export route-map
  No export route-map
  Route limit 4000, warning limit 80% (3200), current count 1609
  VRF label distribution protocol: not configured
  VRF label allocation mode: per-prefix
</input>

<group name="vrf.{{ vrf_name }}" input="test1-12" output="test1-12"> 
VRF {{ vrf_name }} (VRF Id = {{ vrf_id}}); default RD {{ vrf_rd }};
<group name="interfaces">
  Interfaces: {{ _start_ }}
    {{ interfaces | joinmatches(",") | ROW | resub(" +", ",", 5) | split(',') }}
    {{ interfaces | joinmatches(",") | split(',') }}
</group>
<group name="afis.{{ afi }}">
Address family {{ afi }} unicast (Table ID = {{ ignore }}):
<group name="export_rt">
  Export VPN route-target communities {{ _start_ }}
    {{ export_rt | joinmatches(",") | ROW | resub(" +", ",", 5) | split(',') }}
    {{ export_rt | joinmatches(",") | split(',') }}
</group>
<group name="import_rt">
  Import VPN route-target communities {{ _start_ }}
    {{ import_rt | joinmatches(",") | ROW | resub(" +", ",", 5) | split(',') }}
    {{ import_rt | joinmatches(",") | split(',') }}
</group>
  Import route-map: {{ import_route_map | default(None) }}
  Export route-map: {{ export_route_map | default(None) }}
  Route limit {{ route_limit }}, warning limit {{ route_limit_warning }}% (3200), current count {{ routes_count }}
  VRF label distribution protocol: {{ label_dist_proto | ORPHRASE }}
  VRF label allocation mode: {{ label_alloc_mode }}
</group>
</group>

<output name="test1-12"
functions="is_equal"
description="test ROW regex, multiple matches, joinmatches"
load="json"
>
{
    "vrf": {
        "TPGMPLS": {
            "afis": {
                "ipv4": {
                    "export_route_map": null,
                    "export_rt": {
                        "export_rt": [
                            "RT:7545:24"
                        ]
                    },
                    "import_route_map": null,
                    "import_rt": {
                        "import_rt": [
                            "RT:7545:24",
                            "RT:7545:7544",
                            "RT:9942:17",
                            "RT:9942:31546",
                            "RT:7545:89900",
                            "RT:7545:650",
                            "RT:7545:89564",
                            "RT:7545:89611"
                        ]
                    },
                    "label_alloc_mode": "per-prefix",
                    "label_dist_proto": "not configured",
                    "route_limit": "4000",
                    "route_limit_warning": "80",
                    "routes_count": "1609"
                }
            },
            "interfaces": {
                "interfaces": [
                    "Te0/3/0.401",
                    "Te0/3/0.302",
                    "Te0/3/0.315",
                    "Te0/3/0.316",
                    "Te0/3/0.327",
                    "Te0/3/0.371",
                    "Te0/3/0.373",
                    "Te0/3/0.15",
                    "Te0/3/0.551",
                    "Te0/3/0.552",
                    "Te0/3/0.2527",
                    "Te0/3/0.711",
                    "Te0/3/0.500",
                    "Te0/3/0.325",
                    "Te0/3/0.324",
                    "Te0/3/0.32787"
                ]
            },
            "vrf_id": "4",
            "vrf_rd": "7545:24"
        }
    }
}
</output>



<input load="text" name="test1-13">
interface Vlan777
  description Management
  ip address 192.168.0.1/24
  vrf MGMT
!
interface Vlan778
  description Management
  ip address 192.168.0.1/24
  vrf MGMT
!
interface Vlan779
  ip address 192.168.0.1/24
  vrf MGMT
!
</input>
<macro>
def check(data):
    if data == "Vlan779":
        return data + "1000"
</macro>
<macro>
def check2(data):
    if "778" in data:
        return {"data": data, "key_vlan": True, "field2": 5678}
</macro>
<group name="interfaces_macro" default="None" input="test1-13" output="test1-13">
interface {{ interface | macro("check") | macro("check2")}}
  description {{ description }}
  ip address {{ ip }}/{{ mask }}
  vrf {{ vrf }}
!{{_end_}}
</group>
<output name="test1-13"
functions="is_equal"
description="test match variable macro function"
load="json"
>
{
"interfaces_macro":[
{
    "description": "Management",
    "interface": "Vlan777",
    "ip": "192.168.0.1",
    "mask": "24",
    "vrf": "MGMT"
},
{
    "description": "Management",
    "interface": {
        "data": "Vlan778",
        "field2": 5678,
        "key_vlan": true
    },
    "ip": "192.168.0.1",
    "mask": "24",
    "vrf": "MGMT"
},
{
    "description": "None",
    "interface": "Vlan7791000",
    "ip": "192.168.0.1",
    "mask": "24",
    "vrf": "MGMT"
}
]
}
</output>



<input load="text" name="test1-14">
interface Vlan123
 description Desks vlan
 ip address 192.168.123.1 255.255.255.0
!
interface GigabitEthernet1/1
 description to core-1
!
interface Vlan222
 description Phones vlan
 ip address 192.168.222.1 255.255.255.0
!
interface Loopback0
 description Routing ID loopback
!
</input>

 <macro>
def check_if_svi(data):
    if "Vlan" in data:
        return data, {"is_svi": True}
    else:
       return data, {"is_svi": False}
        
def check_if_loop(data):
    if "Loopback" in data:
        return data, {"is_loop": True}
    else:
       return data, {"is_loop": False}
 </macro>
 
 <macro>
def description_mod(data):
    # To revert words order in descripotion
    words_list = data.split(" ")
    words_list_reversed = list(reversed(words_list))
    words_reversed = " ".join(words_list_reversed) 
    return words_reversed
 </macro>
 
<group name="interfaces_macro_more" input="test1-14" output="test1-14">
interface {{ interface | macro("check_if_svi") | macro("check_if_loop") }}
 description {{ description | ORPHRASE | macro("description_mod")}}
 ip address {{ ip }} {{ mask }}
</group>

<output name="test1-14"
functions="is_equal"
description="test more match variable macro functions"
load="json"
>
{
     "interfaces_macro_more": [
         {
             "description": "vlan Desks",
             "interface": "Vlan123",
             "ip": "192.168.123.1",
             "is_loop": false,
             "is_svi": true,
             "mask": "255.255.255.0"
         },
         {
             "description": "core-1 to",
             "interface": "GigabitEthernet1/1",
             "is_loop": false,
             "is_svi": false
         },
         {
             "description": "vlan Phones",
             "interface": "Vlan222",
             "ip": "192.168.222.1",
             "is_loop": false,
             "is_svi": true,
             "mask": "255.255.255.0"
         },
         {
             "description": "loopback ID Routing",
             "interface": "Loopback0",
             "is_loop": true,
             "is_svi": false
         }
     ]
 }
 </output>
 
 
<input load="text" name="test1-15">
router bgp 65100
  neighbor 10.145.1.9
    remote-as 65101
  !
  neighbor 192.168.101.1
    remote-as 65102
</input>

<lookup name="ASNs" load="csv">
ASN,as_name,as_description
65101,Customer_1,Private ASN for CN451275
65102,CPEs,Private ASN for FTTB CPEs
</lookup>

<group name="bgp_config" input="test1-15" output="test1-15">
router bgp {{ bgp_as }}
 <group name="peers">
  neighbor {{ peer }}
    remote-as {{ remote_as | lookup('ASNs', add_field='asn_details') }}
 </group>
</group>   

<output name="test1-15"
functions="is_equal"
description="test csv lookup"
load="json"
>
{
    "bgp_config": {
        "bgp_as": "65100",
        "peers": [
            {
                "asn_details": {
                    "as_description": "Private ASN for CN451275",
                    "as_name": "Customer_1"
                },
                "peer": "10.145.1.9",
                "remote_as": "65101"
            },
            {
                "asn_details": {
                    "as_description": "Private ASN for FTTB CPEs",
                    "as_name": "CPEs"
                },
                "peer": "192.168.101.1",
                "remote_as": "65102"
            }
        ]
    }
}
</output>

 
<!--output to print raw python result to screen
<output
name="print_python"
returner="terminal"
format="raw"
/>
-->

<!--final output to put all results in tabulate table-->
<output 
format="tabulate"
returner="terminal"
format_attributes = "tablefmt='fancy_grid'"
/>
</template>


<!--one more teamplte###############################################################################################-->
<template
name="template2"
description="test vars path forming and saving in results"
>

<vars name="vars.info*.bla">
hostname='gethostname' 
</vars>

<vars name=''>
caps = "ORPHRASE | upper"
</vars>

<vars name="vars.info*.bla">
filename='getfilename' 
</vars>

<input name="test2-1" load="text" groups="interfaces">
router1#show run int vlan 777
interface Vlan777
 description Management
 ip address 192.168.0.1/24
 vrf MGMT
</input>

<group name="interfaces" output="test2-1">
interface {{ interface }}
 description {{ description }}
 ip address {{ ip }} {{ mask }}
 vrf {{ vrf }}
</group>

<output name="test2-1"
load="json"
functions="is_equal"
description="test vars path forming and saving in results"
>
{
    "interfaces": {
        "description": "Management",
        "interface": "Vlan777",
        "vrf": "MGMT"
    },
    "vars": {
        "info": [
            {
                "bla": {
                    "filename": "text_data",
                    "hostname": "router1"
                }
            }
        ]
    }
}
</output>

<!--final output to put all results in tabulate table-->
<output 
returner="terminal"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
/>
</template>



<!--one more teamplte###############################################################################################-->
<template
name="template3"
description="template to test csv/tabulate group specific outputters"
>
<!--test csv and tabulate outputters-->
<input name="test3-1" load="text" groups="interfaces2.trunks2, interfaces3.trunks3">
interface GigabitEthernet3/3
 switchport trunk allowed vlan add 138,166-173 
 description some description
!
interface GigabitEthernet3/4
 switchport trunk allowed vlan add 100-105
!
interface GigabitEthernet3/5
 switchport trunk allowed vlan add 459,531,704-707
 ip address 1.1.1.1 255.255.255.255
 vrf forwarding ABC_VRF
!
</input>

<!--group with group specific outputs:-->
<group name="interfaces2.trunks2" output="out_csv2, test3-1">
interface {{ interface }}
 switchport trunk allowed vlan add {{ trunk_vlans }}
 description {{ description | ORPHRASE }}
 vrf forwarding {{ vrf }}
 ip address {{ ip }} {{ mask }}
!{{ _end_ }}
</group>

<group name="interfaces3.trunks3" output="out_tabulate2, test3-2">
interface {{ interface }}
 switchport trunk allowed vlan add {{ trunk_vlans }}
 description {{ description | ORPHRASE }}
 vrf forwarding {{ vrf }}
 ip address {{ ip }} {{ mask }}
!{{ _end_ }}
</group>

<!--group specific outputs:-->
<out
name="out_csv2"
path="interfaces2.trunks2"
format="csv"
sep=","
missing="undefined"
description="group specific csv outputter"
/>

<out 
name="test3-1"
load="text"
returner="self"
functions="is_equal"
description="test csv group specific outputter"
>description,interface,ip,mask,trunk_vlans,vrf
some description,GigabitEthernet3/3,undefined,undefined,138,166-173,undefined
undefined,GigabitEthernet3/4,undefined,undefined,100-105,undefined
undefined,GigabitEthernet3/5,1.1.1.1,255.255.255.255,459,531,704-707,ABC_VRF</out>

<out
name="out_tabulate2"
path="interfaces3.trunks3"
format="tabulate"
description="group specific tabulate outputter"
/>

<out 
name="test3-2"
load="text"
returner="self"
functions="is_equal"
description="test tabulate group specific outputter"
>description       interface           ip       mask             trunk_vlans      vrf
----------------  ------------------  -------  ---------------  ---------------  -------
some description  GigabitEthernet3/3                            138,166-173
                  GigabitEthernet3/4                            100-105
                  GigabitEthernet3/5  1.1.1.1  255.255.255.255  459,531,704-707  ABC_VRF</out>

<!--final output to put all results in tabulate table-->
<output 
returner="terminal"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
/>

</template>




<!--one more teamplte###############################################################################################-->
<template
name="template4"
description="template to test csv/tabulate global outputters"
>
<!--test csv and tabulate outputters-->
<input name="test4-1" load="text" groups="interfaces.trunks">
interface GigabitEthernet3/3
 switchport trunk allowed vlan add 138,166-173 
 description some description
!
interface GigabitEthernet3/4
 switchport trunk allowed vlan add 100-105
!
interface GigabitEthernet3/5
 switchport trunk allowed vlan add 459,531,704-707
 ip address 1.1.1.1 255.255.255.255
 vrf forwarding ABC_VRF
!
interface GigabitEthernet3/7
 switchport trunk allowed vlan add 138,166-173 
 description some description
!
interface GigabitEthernet3/8
 switchport trunk allowed vlan add 100-105
!
interface GigabitEthernet3/9
 switchport trunk allowed vlan add 459,531,704-707
 ip address 1.1.1.1 255.255.255.255
 vrf forwarding ABC_VRF
!
</input>

<!--group for global outputs:-->
<group name="interfaces.trunks">
interface {{ interface }}
 switchport trunk allowed vlan add {{ trunk_vlans }}
 description {{ description | ORPHRASE }}
 vrf forwarding {{ vrf }}
 ip address {{ ip }} {{ mask }}
!{{ _end_ }}
</group>

<!--global outputs:-->
<out
name="out_csv"
path="interfaces.trunks"
format="csv"
returner="self"
sep=","
missing="undefined"
load="python"
/>

<out 
name="test4-1"
load="text"
returner="self"
functions="is_equal"
description="test global csv outputter"
>description,interface,ip,mask,trunk_vlans,vrf
some description,GigabitEthernet3/3,undefined,undefined,138,166-173,undefined
undefined,GigabitEthernet3/4,undefined,undefined,100-105,undefined
undefined,GigabitEthernet3/5,1.1.1.1,255.255.255.255,459,531,704-707,ABC_VRF
some description,GigabitEthernet3/7,undefined,undefined,138,166-173,undefined
undefined,GigabitEthernet3/8,undefined,undefined,100-105,undefined
undefined,GigabitEthernet3/9,1.1.1.1,255.255.255.255,459,531,704-707,ABC_VRF</out>

<!--final output to put all results in tabulate table-->
<output 
returner="terminal"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
/>
</template>



</template>