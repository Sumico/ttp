<template>

<!--one more template###############################################################################################-->
<template
name="template-1" 
description="Groups to test various function"
>
<vars>
vlans = "unrange(rangechar='-', joinchar=',') | joinmatches(',')"
</vars>

<!--to test chain with unrange and joinmatches-->
<input name="test1-1" load="text" groups="interfaces">
interface GigabitEthernet3/3
 switchport trunk allowed vlan add 138,166-173 
 switchport trunk allowed vlan add 400,401,410
</input>

<group name="interfaces" output="test1-1">
interface {{ interface }}
 switchport trunk allowed vlan add {{ trunk_vlans | chain("vlans") }}
</group>

<output 
name="test1-1" 
load="json" 
functions="is_equal" 
description="test vlans unrange and joinmatches functions" 
>
{
    "interfaces": {
        "interface": "GigabitEthernet3/3",
        "trunk_vlans": "138,166,167,168,169,170,171,172,173,400,401,410"
    }
}
</output>


<!--test contains('vlan') for interfaces-->
<input name="test1-2" load="text" groups="SVIs">
interface Vlan123
 description Desks vlan
 ip address 192.168.123.1 255.255.255.0
!
interface GigabitEthernet1/1
 description to core-1
!
interface Vlan222
 description Phones vlan
 ip address 192.168.222.1 255.255.255.0
!
interface Loopback0
 description Routing ID loopback
</input>

<group name="SVIs" output="test1-2">
interface {{ interface | contains("Vlan") }}
 description {{ description | ORPHRASE}}
 ip address {{ ip }} {{ mask }}
</group>

<output 
name="test1-2" 
load="python" 
functions="is_equal" 
description="test that only interaces with vlan got to results"
>
{'SVIs': [{'interface': 'Vlan123', 'description': 'Desks vlan', 'ip': '192.168.123.1', 'mask': '255.255.255.0'}, {'interface': 'Vlan222', 'description': 'Phones vlan', 'ip': '192.168.222.1', 'mask': '255.255.255.0'}]}
</output>


<!--test containsall for group results-->
<input 
name="test1-3" 
load="text" 
groups="interfaces_contansall"
>
interface Port-Chanel11
  description Storage Management
!
interface Loopback0
  description RID
  ip address 10.0.0.3/24
!
interface Vlan777
  description Management
  ip address 192.168.0.1/24
  vrf MGMT
</input>

<group name="interfaces_contansall" containsall="ip, vrf" output="test1-3">
interface {{ interface }}
  description {{ description }}
  ip address {{ ip }}/{{ mask }}
  vrf {{ vrf }}
</group>

<output name="test1-3"
load="json"
functions="is_equal"
description="test containsall for group"
>
{
    "interfaces_contansall": {
        "description": "Management",
        "interface": "Vlan777",
        "ip": "192.168.0.1",
        "mask": "24",
        "vrf": "MGMT"
    }
}
</output>


<!--test containsany for group results-->
<input 
name="test1-4" 
load="text" 
groups="interfaces_contains"
>
interface Port-Chanel11
  description Storage Management
!
interface Loopback0
  description RID
  ip address 10.0.0.3/24
!
interface Vlan777
  description Management
  ip address 192.168.0.1/24
  vrf MGMT
</input>

<group name="interfaces_contains" contains="ip,vrf" output="test1-4">
interface {{ interface }}
  description {{ description }}
  ip address {{ ip }}/{{ mask }}
  vrf {{ vrf }}
</group>

<output name="test1-4"
load="json"
functions="is_equal"
description="test contains any for group"
>
{
    "interfaces_contains": [
        {
            "description": "RID",
            "interface": "Loopback0",
            "ip": "10.0.0.3",
            "mask": "24"
        },
        {
            "description": "Management",
            "interface": "Vlan777",
            "ip": "192.168.0.1",
            "mask": "24",
            "vrf": "MGMT"
        }
    ]
}
</output>


<!--test group table method-->
<input 
name="test1-5" 
load="text" 
groups="arp_table"
>
CSR1Kv-3-lab#show ip arp
Protocol  Address          Age (min)  Hardware Addr   Type   Interface
Internet  10.1.13.1              98   0050.5685.5cd1  ARPA   GigabitEthernet2.13
Internet  10.1.13.3               -   0050.5685.14d5  ARPA   GigabitEthernet2.13
</input>

<group name="arp_table" method="table" output="test1-5">
Internet  {{ ip }}  {{ age | DIGIT }}   {{ mac }}  ARPA   {{ interface }}
Internet  {{ ip }}  -                   {{ mac }}  ARPA   {{ interface }}
</group>

<output name="test1-5"
load="json"
functions="is_equal"
description="test group table method"
>
{
    "arp_table": [
        {
            "age": "98",
            "interface": "GigabitEthernet2.13",
            "ip": "10.1.13.1",
            "mac": "0050.5685.5cd1"
        },
        {
            "interface": "GigabitEthernet2.13",
            "ip": "10.1.13.3",
            "mac": "0050.5685.14d5"
        }
    ]
}
</output>


<!--test dynamic path-->
<input 
name="test1-6" 
load="text" 
>
ucs-core-switch-1#show run | section bgp
router bgp 65100
  vrf CUST-1
    neighbor 59.100.71.193
      remote-as 65101
      description peer-1
      address-family ipv4 unicast
        route-map RPL-1-IMPORT-v4 in
        route-map RPL-1-EXPORT-V4 out
      address-family ipv6 unicast
        route-map RPL-1-IMPORT-V6 in
        route-map RPL-1-EXPORT-V6 out
    neighbor 59.100.71.209
      remote-as 65102
      description peer-2
      address-family ipv4 unicast
        route-map RPL-2-IMPORT-V6 in
        route-map RPL-2-EXPORT-V6 out
</input>

<group name="router.bgp.BGP_AS_{{ asn }}" input="test1-6" output="test1-6">
router bgp {{ asn }}
  <group name="vrfs.{{ vrf_name }}">
  vrf {{ vrf_name }}
    <group name="peers.{{ peer_ip }}">
    neighbor {{ peer_ip }}
      remote-as {{ peer_asn }}
      description {{ peer_description }}
	  <group name="afi.{{ afi }}.unicast">
      address-family {{ afi }} unicast
        route-map {{ rpl_in }} in
        route-map {{ rpl_out }} out
	  </group>
	</group>
   </group>
</group>

<output name="test1-6"
load="python"
functions="is_equal"
description="test dynamic path"
>
{'router': {'bgp': {'BGP_AS_65100': {'vrfs': {'CUST-1': {'peers': {'59.100.71.193': {'peer_asn': '65101', 'peer_description': 'peer-1', 'afi': {'ipv4': {'unicast': {'rpl_in': 'RPL-1-IMPORT-v4', 'rpl_out': 'RPL-1-EXPORT-V4'}}, 'ipv6': {'unicast': {'rpl_in': 'RPL-1-IMPORT-V6', 'rpl_out': 'RPL-1-EXPORT-V6'}}}}, '59.100.71.209': {'peer_asn': '65102', 'peer_description': 'peer-2', 'afi': {'ipv4': {'unicast': {'rpl_in': 'RPL-2-IMPORT-V6', 'rpl_out': 'RPL-2-EXPORT-V6'}}}}}}}}}}}
</output>


<!--test set function-->
<vars>
mys_set_var = "my_set_value"
</vars>

<input 
name="test1-7" 
load="text" 
>
interface GigabitEthernet3/4
 switchport mode access 
 switchport trunk encapsulation dot1q
 switchport mode trunk
 switchport nonegotiate
 shutdown
!
interface GigabitEthernet3/7
 switchport mode access 
 switchport mode trunk
 switchport nonegotiate
!
</input>

<group name="interfacesset" input="test1-7" output="test1-7">
interface {{ interface }}
 switchport mode access {{ mode_access | set("True") }}
 switchport trunk encapsulation dot1q {{ encap | set("dot1q") }}
 switchport mode trunk {{ mode | set("Trunk") }} {{ vlans | set("all_vlans") }}
 shutdown {{ disabled | set("True") }} {{ test_var | set("mys_set_var") }}
!{{ _end_ }}
</group>

<output name="test1-7"
functions="is_equal"
description="test set function"
load="python"
>
{
    "interfacesset": [
        {
            "disabled": "True",
            "encap": "dot1q",
            "interface": "GigabitEthernet3/4",
            "mode": "Trunk",
            "mode_access": "True",
            "test_var": "my_set_value",
            "vlans": "all_vlans"
        },
        {
            "interface": "GigabitEthernet3/7",
            "mode": "Trunk",
            "mode_access": "True",
            "vlans": "all_vlans"
        }
    ]
}
</output>



<!--test dynamic path with regex formatters-->
<input 
name="test1-8" 
load="text" 
>
interface Port-Chanel11
  description Storage
!
interface Loopback0
  description RID
  ip address 10.0.0.3/24
!
interface Vlan777
  description Management
  ip address 192.168.0.1/24
  vrf MGMT
!
</input>

<group name="interfaces*.{{ interface }}" output="test1-8" input="test1-8">
interface {{ interface }}
  description {{ description }}
  ip address {{ ip }}/{{ mask }}
  vrf {{ vrf }}
</group>

<output name="test1-8"
functions="is_equal"
description="test dynamic path with regex formatters"
load="json"
>
{
     "interfaces": [
         {
             "Loopback0": {
                 "description": "RID",
                 "ip": "10.0.0.3",
                 "mask": "24"
             },
             "Port-Chanel11": {
                 "description": "Storage"
             },
             "Vlan777": {
                 "description": "Management",
                 "ip": "192.168.0.1",
                 "mask": "24",
                 "vrf": "MGMT"
             }
         }
     ]
}
</output>

<input load="text" name="test1-9">
interface Port-Chanel11
  description Storage
!
interface Loopback0
  description RID
  ip address 10.0.0.3/24
!
interface Vlan777
  description Management
  ip address 192.168.0.1/24
  vrf MGMT
!
</input>

<group input="test1-9" output="test1-9">
interface {{ interface }}
  description {{ description }}
<group name = "ips">
  ip address {{ ip }}/{{ mask }}
</group>
  vrf {{ vrf }}
!{{_end_}}
</group>

<output name="test1-9"
functions="is_equal"
description="test top group without name attribute with _anonymous_ path"
load="json"
>
[
    {
        "description": "Storage",
        "interface": "Port-Chanel11"
    },
    {
        "description": "RID",
        "interface": "Loopback0",
        "ips": {
            "ip": "10.0.0.3",
            "mask": "24"
        }
    },
    {
        "description": "Management",
        "interface": "Vlan777",
        "ips": {
            "ip": "192.168.0.1",
            "mask": "24"
        },
        "vrf": "MGMT"
    }
]
</output>


<input name="test1-10" load="text">
interface Vlan777
  description Management
  ip address 192.168.0.1/24
  vrf MGMT
!
</input>

<vars>
my_var = "L2VC"
</vars>

<group name="interfaces_with_let" input="test1-10" output="test1-10">
interface {{ interface }}
  description {{ description }}
  ip address {{ ip }}/{{ mask }}
  vrf {{ vrf }}
  {{ interface_role | let("Uplink") }}
  {{ provider | let("my_var") }}
!{{_end_}}
</group>

<output name="test1-10"
functions="is_equal"
description="test variables let function"
load="json"
>
{
    "interfaces_with_let": {
        "description": "Management",
        "interface": "Vlan777",
        "interface_role": "Uplink",
        "ip": "192.168.0.1",
        "mask": "24",
        "provider": "L2VC",
        "vrf": "MGMT"
    }
}
</output>

<!--output to print raw python result to screen
<output
name="print_python"
returner="terminal"
format="raw"
/>
-->

<!--final output to put all results in tabulate table-->
<output 
format="tabulate"
returner="terminal"
format_attributes = "tablefmt='fancy_grid'"
/>
</template>


<!--one more teamplte###############################################################################################-->
<template
name="template2"
description="test vars path forming and saving in results"
>

<vars name="vars.info*.bla">
hostname='gethostname' 
</vars>

<vars name=''>
caps = "ORPHRASE | upper"
</vars>

<vars name="vars.info*.bla">
filename='getfilename' 
</vars>

<input name="test2-1" load="text" groups="interfaces">
router1#show run int vlan 777
interface Vlan777
 description Management
 ip address 192.168.0.1/24
 vrf MGMT
</input>

<group name="interfaces" output="test2-1">
interface {{ interface }}
 description {{ description }}
 ip address {{ ip }} {{ mask }}
 vrf {{ vrf }}
</group>

<output name="test2-1"
load="json"
functions="is_equal"
description="test vars path forming and saving in results"
>
{
    "interfaces": {
        "description": "Management",
        "interface": "Vlan777",
        "vrf": "MGMT"
    },
    "vars": {
        "info": [
            {
                "bla": {
                    "filename": "text_data",
                    "hostname": false
                }
            }
        ]
    }
}
</output>

<!--final output to put all results in tabulate table-->
<output 
returner="terminal"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
/>
</template>



<!--one more teamplte###############################################################################################-->
<template
name="template3"
description="template to test csv/tabulate group specific outputters"
>
<!--test csv and tabulate outputters-->
<input name="test3-1" load="text" groups="interfaces2.trunks2, interfaces3.trunks3">
interface GigabitEthernet3/3
 switchport trunk allowed vlan add 138,166-173 
 description some description
!
interface GigabitEthernet3/4
 switchport trunk allowed vlan add 100-105
!
interface GigabitEthernet3/5
 switchport trunk allowed vlan add 459,531,704-707
 ip address 1.1.1.1 255.255.255.255
 vrf forwarding ABC_VRF
!
</input>

<!--group with group specific outputs:-->
<group name="interfaces2.trunks2" output="out_csv2, test3-1">
interface {{ interface }}
 switchport trunk allowed vlan add {{ trunk_vlans }}
 description {{ description | ORPHRASE }}
 vrf forwarding {{ vrf }}
 ip address {{ ip }} {{ mask }}
!{{ _end_ }}
</group>

<group name="interfaces3.trunks3" output="out_tabulate2, test3-2">
interface {{ interface }}
 switchport trunk allowed vlan add {{ trunk_vlans }}
 description {{ description | ORPHRASE }}
 vrf forwarding {{ vrf }}
 ip address {{ ip }} {{ mask }}
!{{ _end_ }}
</group>

<!--group specific outputs:-->
<out
name="out_csv2"
path="interfaces2.trunks2"
format="csv"
sep=","
missing="undefined"
description="group specific csv outputter"
/>

<out 
name="test3-1"
load="text"
returner="self"
functions="is_equal"
description="test csv group specific outputter"
>description,interface,ip,mask,trunk_vlans,vrf
some description,GigabitEthernet3/3,undefined,undefined,138,166-173,undefined
undefined,GigabitEthernet3/4,undefined,undefined,100-105,undefined
undefined,GigabitEthernet3/5,1.1.1.1,255.255.255.255,459,531,704-707,ABC_VRF</out>

<out
name="out_tabulate2"
path="interfaces3.trunks3"
format="tabulate"
description="group specific tabulate outputter"
/>

<out 
name="test3-2"
load="text"
returner="self"
functions="is_equal"
description="test tabulate group specific outputter"
>description       interface           ip       mask             trunk_vlans      vrf
----------------  ------------------  -------  ---------------  ---------------  -------
some description  GigabitEthernet3/3                            138,166-173
                  GigabitEthernet3/4                            100-105
                  GigabitEthernet3/5  1.1.1.1  255.255.255.255  459,531,704-707  ABC_VRF</out>

<!--final output to put all results in tabulate table-->
<output 
returner="terminal"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
/>

</template>




<!--one more teamplte###############################################################################################-->
<template
name="template4"
description="template to test csv/tabulate global outputters"
>
<!--test csv and tabulate outputters-->
<input name="test4-1" load="text" groups="interfaces.trunks">
interface GigabitEthernet3/3
 switchport trunk allowed vlan add 138,166-173 
 description some description
!
interface GigabitEthernet3/4
 switchport trunk allowed vlan add 100-105
!
interface GigabitEthernet3/5
 switchport trunk allowed vlan add 459,531,704-707
 ip address 1.1.1.1 255.255.255.255
 vrf forwarding ABC_VRF
!
interface GigabitEthernet3/7
 switchport trunk allowed vlan add 138,166-173 
 description some description
!
interface GigabitEthernet3/8
 switchport trunk allowed vlan add 100-105
!
interface GigabitEthernet3/9
 switchport trunk allowed vlan add 459,531,704-707
 ip address 1.1.1.1 255.255.255.255
 vrf forwarding ABC_VRF
!
</input>

<!--group for global outputs:-->
<group name="interfaces.trunks">
interface {{ interface }}
 switchport trunk allowed vlan add {{ trunk_vlans }}
 description {{ description | ORPHRASE }}
 vrf forwarding {{ vrf }}
 ip address {{ ip }} {{ mask }}
!{{ _end_ }}
</group>

<!--global outputs:-->
<out
name="out_csv"
path="interfaces.trunks"
format="csv"
returner="self"
sep=","
missing="undefined"
load="python"
/>

<out 
name="test4-1"
load="text"
returner="self"
functions="is_equal"
description="test global csv outputter"
>description,interface,ip,mask,trunk_vlans,vrf
some description,GigabitEthernet3/3,undefined,undefined,138,166-173,undefined
undefined,GigabitEthernet3/4,undefined,undefined,100-105,undefined
undefined,GigabitEthernet3/5,1.1.1.1,255.255.255.255,459,531,704-707,ABC_VRF
some description,GigabitEthernet3/7,undefined,undefined,138,166-173,undefined
undefined,GigabitEthernet3/8,undefined,undefined,100-105,undefined
undefined,GigabitEthernet3/9,1.1.1.1,255.255.255.255,459,531,704-707,ABC_VRF</out>

<!--final output to put all results in tabulate table-->
<output 
returner="terminal"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
/>
</template>



</template>